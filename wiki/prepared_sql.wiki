#summary 预备SQL语句的特殊语法

=概述=
框架中的预备SQL语句主要出现在query和update中的prepared-sql节点的内部文本中，和JDBC中的PreparedStatement一样，"?"表示需要设置参数。而"#"则是框架中添加的特殊标识，用于处理特殊的语法。<br>
第一个用处就是对单个字符的转义，如：<br>
##：表示一个"#"<br>
#?：表示这个"?"是一个字符，不会被认为是参数<br>
下面会分别介绍一些其他的用法。<br>
<br>
=sub 动态子语句=
动态子句就是一段SQL语句片段，它可以和主语句构成一个完整的SQL。<br>
完整的动态子句写法如下：
{{{
#sub[...$...]
或
#sub
}}}
以"#sub"开始，后面"[]"内的部分为子句的模板（如果没有模板则可去掉"[]"部分），"$"为动态子句出现的位置。如果模板部分需要出现"[]$"这些字符，可以用"#["，"#]"，"#$"代替。<br>
模板的作用是这样的，当插入的内容为空时，则动态子语句就变为空字符串，当插入的内容不为空时，则将插入的内容套入模板后再插入。<br>
例子如下：
{{{
预备SQL语句如下
SELECT * FROM TEST_TABLE
#sub[WHERE $]

当执行了
query.setSubSQL(1, "");
后，此段语句就变为
SELECT * FROM TEST_TABLE

当执行了
query.setSubSQL(1, "status = 0");
后，此段语句就变为
SELECT * FROM TEST_TABLE
WHERE status = 0
}}}
有了子句模板之后，代码中就不必关心这部分SQL片段插入后需要在之前或之后添加什么了。<br>
setSubSQL方法的说明：<br>
第一个参数为要设置的子句的索引值（即第几个子句），从1开始。<br>
第二个参数为要设置的子句片段。<br>
第三个参数为一个参数管理者，可以用于绑定子句中出现的参数。<br>
下面的例子为一个带参数的子句。
{{{
PreparerManager pm = new PreparerManager(2);
// 绑定第一个整型参数
ValuePreparer preparer = factory.getDefaultValuePreparerCreaterGenerator().createIntPreparer(1, 0);
// 绑定第二个字符串型参数
ValuePreparer preparer = factory.getDefaultValuePreparerCreaterGenerator().createStringPreparer(2, "用户名");
query.setSubSQL(1, "status = ? and userId = ?", pm);
}}}
<br>
=param 动态参数=
动态参数就是一段可以出现也可以不出现的，用于参数设置的语句片段。<br>
完整的动态参写法如下：
{{{
#param(name)[...?...]
}}}
以"#param"开始，后面"(name)"内的"name"表示动态参数模板段分组的名称，同一名称的模板，要么在设置参数时同时出现，要么没有设置参数时都不出现。再后面"[]"内的部分为动态参数的模板部分。
=例子中的变量说明=
query为`self.micromagic.eterna.sql.QueryAdapter`的实例<br>
update为`self.micromagic.eterna.sql.UpdateAdapter`的实例<br>
factory为`self.micromagic.eterna.share.EternaFactory`的实例