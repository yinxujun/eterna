#summary 两次查询的搜索
#labels Phase-Implementation

=两次查询的搜索=
实现类为：`self.micromagic.eterna.search.DoubleQuerySearch`。<br>
其执行过程为：第一次查询，取出所有的主键；第二次查询，根据前一次查询结果中的主键值，取出正式的结果。<br>
在查询数据量非常大，且需要对某几个字段进行排序时，或者查询结果中存在数据量较大的字段时，使用这种方式可以大大加快查询的效率。当然，需要排序的话，要先对主键及排序字段建索引。<br>
<br>
需要在search节点中设置的attribute值如下：
||名称||必须||说明||
||nextQueryName||是||第二次查询的query名称||
||keyConditionIndex||否||上面这个query中设置key条件的索引值，默认值为1||
||keyNameList||是||主键名称列表, 格式为  name1,name2,... 或 name1:col1,name2,...||
||assistSearchName||否||辅助的search名称，用于设置其他的条件，可使用$same表示使用本search||
||needAssistCondition||否||是否需要设置辅助search的条件，当assistSearchName为$same时默认值为false<br>当assistSearchName为其它search的名称时默认值为true||


=样例=
假设有两个表，一个是人员信息表，id是此表的主键，userInfo是个大数据字段；一个是工作情况表，id是外键，id+createDate是主键，workInfo是个大数据字段。现在要做一个查询，查出所有人的工作情况，如果没有工作情况，仅列出人员信息。<br>
表数据如下：<br>
sample_a，人员信息
||1||测试1||测试1的用户信息||
||2||测试2||测试2的用户信息||
||3||其他1||其他1的用户信息||
||4||其他2||其他2的用户信息||
||5||测试3||测试3的用户信息||
||6||其他3||其他3的用户信息||

sample_b，工作情况
||1||2012-8-9||测试1 2012年8月9日的工作日志||
||2||2012-8-9||测试2 2012年8月9日的工作日志||
||1||2012-8-10||测试1 2012年8月10日的工作日志||

<br>
注，以上业务场景及相关数据纯属虚构，如有雷同，不甚荣幸。<br>
<br>
代码样例：
{{{
<query name="a.query">
   <prepared-sql>
      select a.id, b.createDate
      from sample_a a left join sample_b b on a.id = b.id
      #sub[where $]
   </prepared-sql>
   <readers>
      <reader name="id" type="int"/>
      <reader name="createDate" type="Date"/>
   </readers>
</query>
<search name="sample.search" queryName="a.query" pageSize="5"
      generator="self.micromagic.eterna.search.DoubleQuerySearch">
   <condition-propertys>
      <condition-property name="name" colType="String"/>
   </condition-propertys>
   <attribute name="nextQueryName" value="b.query"/>
   <attribute name="keyNameList" value="id:a.id,createDate"/>
</search>
<query name="b.query">
   <prepared-sql>
      select a.id, a.name, a.userInfo, b.createDate, b.workInfo
      from sample_a a left join sample_b b on a.id = b.id
      #sub[where $]
   </prepared-sql>
   <readers>
      <reader name="id" type="int"/>
      <reader name="name" type="String"/>
      <reader name="userInfo" type="String"/>
      <reader name="createDate" type="Date"/>
      <reader name="workInfo" type="String"/>
   </readers>
</query>
}}}
执行结果：
{{{
<query name="a.query" time="2012-08-17 09:14:31" usedTime="265">
   <prepared-sql>
      select a.id, b.createDate
      from sample_a a left join sample_b b on a.id = b.id
      where (name LIKE ?)
   </prepared-sql>
   <parameters>
      <parameter name="name" index="1" type="String">%测试%</parameter>
   </parameters>
</query>
<result type="ResultIterator" rowCount="4">
   <value index="1" type="ResultRow" columnCount="2">
      <value columnName="id" type="int" value="1"/>
      <value columnName="createDate" type="Date" value="2012-08-09"/>
   </value>
   <value index="2" type="ResultRow" columnCount="2">
      <value columnName="id" type="int" value="2"/>
      <value columnName="createDate" type="Date" value="2012-08-09"/>
   </value>
   <value index="3" type="ResultRow" columnCount="2">
      <value columnName="id" type="int" value="1"/>
      <value columnName="createDate" type="Date" value="2012-08-10"/>
   </value>
   <value index="4" type="ResultRow" columnCount="2">
      <value columnName="id" type="int" value="5"/>
      <value columnName="createDate" type="Date" value=""/>
   </value>
</result>
<query name="b.query" time="2012-08-17 09:14:31" usedTime="63">
   <prepared-sql>
      select a.id, a.name, a.userInfo, b.createDate, b.workInfo
      from sample_a a left join sample_b b on a.id = b.id
      where ((a.id = ? AND createDate = ?) OR (a.id = ? AND createDate = ?)
            OR (a.id = ? AND createDate = ?) OR (a.id = ? AND createDate is null))</prepared-sql>
   <parameters>
      <parameter index="1" type="int">1</parameter>
      <parameter index="2" type="Date">2012-08-09</parameter>
      <parameter index="3" type="int">2</parameter>
      <parameter index="4" type="Date">2012-08-09</parameter>
      <parameter index="5" type="int">1</parameter>
      <parameter index="6" type="Date">2012-08-10</parameter>
      <parameter index="7" type="int">5</parameter>
   </parameters>
</query>
<result type="ResultIterator" rowCount="4">
   <value index="1" type="ResultRow" columnCount="5">
      <value columnName="id" type="int" value="1"/>
      <value columnName="name" type="String" value="测试1"/>
      <value columnName="userInfo" type="String" value="测试1的用户信息"/>
      <value columnName="createDate" type="Date" value="2012-08-09"/>
      <value columnName="workInfo" type="String" value="测试1 2012年8月9日的工作日志"/>
   </value>
   <value index="2" type="ResultRow" columnCount="5">
      <value columnName="id" type="int" value="2"/>
      <value columnName="name" type="String" value="测试2"/>
      <value columnName="userInfo" type="String" value="测试2的用户信息"/>
      <value columnName="createDate" type="Date" value="2012-08-09"/>
      <value columnName="workInfo" type="String" value="测试2 2012年8月9日的工作日志"/>
   </value>
   <value index="3" type="ResultRow" columnCount="5">
      <value columnName="id" type="int" value="1"/>
      <value columnName="name" type="String" value="测试1"/>
      <value columnName="userInfo" type="String" value="测试1的用户信息"/>
      <value columnName="createDate" type="Date" value="2012-08-10"/>
      <value columnName="workInfo" type="String" value="测试1 2012年8月10日的工作日志"/>
   </value>
   <value index="4" type="ResultRow" columnCount="5">
      <value columnName="id" type="int" value="5"/>
      <value columnName="name" type="String" value="测试3"/>
      <value columnName="userInfo" type="String" value="测试3的用户信息"/>
      <value columnName="createDate" type="Date" value=""/>
      <value columnName="workInfo" type="String" value=""/>
   </value>
</result>
}}}