#summary 如何配置
#labels Phase-Implementation,Featured

=web.xml中servlet的定义=
{{{
<servlet>
   <servlet-name>test</servlet-name>
   <servlet-class>self.micromagic.app.EternaServlet</servlet-class>
   <init-param>
      <param-name>initFiles</param-name>
      <param-value>cp:test/my.xml</param-value>
   </init-param>
</servlet>
<servlet-mapping>
   <servlet-name>test</servlet-name>
   <url-pattern>/test.do</url-pattern>
</servlet-mapping>
}}}

参数initFiles，指配置文件，多个文件可以用";"分割。如果是以"cp:"开头的，表示是classpath中的路径。

如果想要xml修改后能够自动加载，那可以自己定义一个类继承`self.micromagic.app.EternaServlet`，并且实现`self.micromagic.eterna.share.EternaInitialize`接口。然后定义如下方法：
{{{
private static long autoReloadTime()
{
   return 10000L;
}
}}}
此方法必须是静态的，返回类型为long，表示两次判断文件是否有更新的最新间隔时间，单位为毫秒，上面例子中最小间隔时间为10秒。<br>
将web.xml中，相关的servlet类换成你自己定义的类，这样就会在xml文件更新后自动加载了。<br>
如例子中的test.Test类就是这个作用。<br>
<br><br>


=如何使用dtd=
有人说xml配置起来麻烦，但如果xml编写的时候有提示呢，那是不是就和写java代码一样。<br>
下图为如何在eclipse中配置dtd文件。<br>
[http://eterna.googlecode.com/files/eclipse_dtd.gif]<br>
此功能在eclipse的windows——>preferences——>Files and Editors菜单中，点击add后就能出现下半部分，按图中的配置进行设置。<br>
这样，你的xml起始部分按如下代码书写就能有自动提示了。
{{{
<?xml version="1.0" encoding="GBK"?>
<!DOCTYPE eterna-config PUBLIC "eterna" "http://eterna.googlecode.com/files/eterna_1_3.dtd">
}}}
这就是为什么用xml来配置，而不用json的原因。大部分的xml编辑工具，在有dtd或schema的时候，写xml就会变得很容易，而json还没有什么好的编辑工具。<br>
<br><br>


=通用显示界面=
最终的页面是通过jsp来显示了，但这里只需要一个jsp页面就行了，如例子中的view.jsp。
{{{
<%@ page session="false" contentType="text/html;charset=UTF-8" pageEncoding="GBK"%>
<%@ page import ="self.micromagic.eterna.model.AppData,
                  self.micromagic.app.WebApp,
                  self.micromagic.eterna.view.ViewAdapter,
                  self.micromagic.eterna.view.BaseManager"%>
<%
   String dataType = request.getParameter(ViewAdapter.DATA_TYPE);
   if (ViewAdapter.DATA_TYPE_ONLYRECORD.equals(dataType)
         || ViewAdapter.DATA_TYPE_ALL.equals(dataType))
   {
      ViewAdapter view = (ViewAdapter) request.getAttribute(WebApp.VIEW_TAG);
      AppData data = (AppData) request.getAttribute(WebApp.APPDATA_TAG);
      if (view != null)
      {
         view.printView(out, data);
      }
   }
   else
   {
      String root = request.getContextPath();
      int eternaId = BaseManager.createEternaId();
%>

<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<meta http-equiv="pragma" content="no-cache">
<script language="javascript">
if (typeof _page_init == "undefined")
{
   window._page_init = {};
   window._loadScript = function (src, scriptFlag, recall)
   {
      (function() {
         var scriptObj = document.createElement('script');
         scriptObj.type = 'text/javascript';
         scriptObj.async = true;
         scriptObj.src = src;
         scriptObj.scriptFlag = scriptFlag;
         var s = document.getElementsByTagName('script')[0];
         s.parentNode.insertBefore(scriptObj, s);
         if (scriptObj.readyState) //IE
         {
            scriptObj.onreadystatechange = function()
            {
               if (scriptObj.readyState == "complete" || scriptObj.readyState == "loaded")
               {
                   window._page_init[scriptObj.scriptFlag] = true;
                   if (recall != null) recall();
               }
           };
         }
         else //Others
         {
            scriptObj.onload = function()
            {
                window._page_init[scriptObj.scriptFlag] = true;
                if (recall != null) recall();
            };
         }
      })();
   };
   window._loadEterna = function () {
      jQuery.noConflict();
      window._loadScript('<%= root %>/eterna/eterna.js', 'eterna');
   };
   (function() {
      var styleObj = document.createElement('link');
      styleObj.type = 'text/css';
      styleObj.rel = 'stylesheet';
      styleObj.href = '<%= root %>/res/sample.css';
      var s = document.getElementsByTagName('script')[0];
      s.parentNode.insertBefore(styleObj, s);
   })();
   window._loadScript('<%= root %>/eterna/jquery.js', 'jQuery', window._loadEterna);
   window._loadScript('<%= root %>/My97DatePicker/WdatePicker.js', 'WdatePicker');
}
</script>
<script language="javascript">

function page_eterna_<%= eternaId %>()
{

<%
      ViewAdapter view = (ViewAdapter) request.getAttribute(WebApp.VIEW_TAG);
      AppData data = (AppData) request.getAttribute(WebApp.APPDATA_TAG);
      String width = null;
      String height = null;
      if (view != null)
      {
         width = view.getWidth();
         height = view.getHeight();
         out.print("var eternaData=");
         view.printView(out, data);
         out.print(";");
      }

      String pDebug = request.getParameter("debug");
%>

var eterna_debug = <%= pDebug != null ? pDebug : view != null ? view.getDebug() + "" : "0" %>;
var _eterna;

this.initView = function()
{
<%
      if (view != null)
      {
%>
   var divObj = jQuery("#eternaShow_<%= eternaId %>");
<%
         if (width != null)
         {
%>
   divObj.css("width", "<%= width %>");
<%
         }
         if (height != null)
         {
%>
   divObj.css("height", "<%= height %>");
<%
         }
%>
   _eterna = new Eterna(eternaData, eterna_debug, divObj)
   _eterna.reInit();
<%
      }
%>
}

} <% /* end function page_eterna_XXX */ %>
</script>
<style type="text/css">
body {
}
</style>
</head>
<body>
<div id="eternaShow_<%= eternaId %>" class="eternaFrame"></div>
<script language="javascript">
function init_page_eterna_<%= eternaId %>()
{
   if (!window._page_init["jQuery"] || !window._page_init["eterna"])
   {
      setTimeout(init_page_eterna_<%= eternaId %>, 100);
      return;
   }
   new page_eterna_<%= eternaId %>().initView();
}
setTimeout(init_page_eterna_<%= eternaId %>, 100);
</script>
</body>
</html>
<%
   }
%>
}}}
此页面的功能有：
  # 根据view对象，生成json
  # 根据json对象，生成界面
  # 判断js文件是否已引用，不重复引用
  # 给界面生成一个独立的命名空间，这样在portlet中就不会发生冲突
<br><br>
如果你使用taglib，那这个页面代码能够更简单：
{{{
<%@ page session="false" contentType="text/html;charset=UTF-8"%><%@
    page import ="self.micromagic.eterna.view.impl.ViewTool"%><%@
    taglib prefix="e" uri="http://code.google.com/p/eterna" %><%
   String id = "_" + ViewTool.createEternaId();
%><e:init parentElement="eternaShow" divClass="eternaFrame" printHTML="2" suffixId="<%= id %>">
<e:res url="/eterna/jquery.js"/>
<e:res url="/eterna/eterna.js"/>
<e:res url="/My97DatePicker/WdatePicker.js"/>
<e:res url="/res/sample.css" jsResource="false" charset="UTF-8"/>
</e:init>
}}}
`<%@ taglib prefix="e" uri="http://code.google.com/p/eterna" %>`这段代码为对tablib的引用(当然需要先在web.xml中定义好uri)，“e:init”标签的功能同上面的那段jsp代码所实现的功能。
<br><br>


=公共配置=
公共配置文件为：micromagic_config.properties，此文件一般放在WEB-INF\classes目录下。<br>
里面的主要属性有以下几个：
  # self.micromagic.eterna.digester.initfiles，全局配置文件，这些文件中的配置对象在各个子配置中都可以使用。
  # page.view，通用视图的jsp文件，一般设为/view.jsp，这样export的path属性就可以设为${page.view}，如果文件有变动就只需改变page.view的值，而不用改动所有export的path属性。