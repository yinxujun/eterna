
package self.micromagic.util.ext;

import java.io.Writer;
import java.io.IOException;

import self.micromagic.eterna.view.impl.DataPrinterImpl;
import self.micromagic.eterna.view.impl.StringCoderImpl;
import self.micromagic.eterna.digester.ConfigurationException;
import self.micromagic.util.Utility;

/**
 * 将一个对象或数据类型以json的格式输出.
 *
 * @see DataPrinterImpl
 */
public class JsonPrinter
{
   /**
    * 使用<code>DataPrinterImpl</code>进行对象->Json字符串的转换.
    */
   private static DataPrinterImpl printer = new DataPrinterImpl(new StringCoderImpl());

   /**
    * json字符串的输出流.
    */
   private Writer out;

   /**
    * 构造一个<code>JsonPrinter</code>对象.
    *
    * @param out   转换后的json字符串的输出流.
    */
   public JsonPrinter(Writer out)
   {
      this.out = out;
   }

   /**
    * 输出布尔类型值.
    *
    * @param b           布尔值
    */
   public JsonPrinter print(boolean b)
         throws IOException
   {
      try
      {
         printer.print(this.out, b);
      }
      catch (ConfigurationException ex)
      {
         throw new RuntimeException(ex);
      }
      return this;
   }

   /**
    * 输出字符类型值.
    *
    * @param c           字符值
    */
   public JsonPrinter print(char c)
         throws IOException
   {
      try
      {
         printer.print(this.out, c);
      }
      catch (ConfigurationException ex)
      {
         throw new RuntimeException(ex);
      }
      return this;
   }

   /**
    * 输出整型值.
    *
    * @param i           整型值
    */
   public JsonPrinter print(int i)
         throws IOException
   {
      try
      {
         printer.print(this.out, i);
      }
      catch (ConfigurationException ex)
      {
         throw new RuntimeException(ex);
      }
      return this;
   }

   /**
    * 输出长整型值.
    *
    * @param l           长整型值
    */
   public JsonPrinter print(long l)
         throws IOException
   {
      try
      {
         printer.print(this.out, l);
      }
      catch (ConfigurationException ex)
      {
         throw new RuntimeException(ex);
      }
      return this;
   }

   /**
    * 输出浮点型值.
    *
    * @param f           浮点型值
    */
   public JsonPrinter print(float f)
         throws IOException
   {
      try
      {
         printer.print(this.out, f);
      }
      catch (ConfigurationException ex)
      {
         throw new RuntimeException(ex);
      }
      return this;
   }

   /**
    * 输出双精度浮点型值.
    *
    * @param d           双精度浮点型值
    */
   public JsonPrinter print(double d)
         throws IOException
   {
      try
      {
         printer.print(this.out, d);
      }
      catch (ConfigurationException ex)
      {
         throw new RuntimeException(ex);
      }
      return this;
   }


   /**
    * 输出字符串类型值.
    *
    * @param s           字符串类型值
    */
   public JsonPrinter print(String s)
         throws IOException
   {
      try
      {
         printer.print(this.out, s);
      }
      catch (ConfigurationException ex)
      {
         throw new RuntimeException(ex);
      }
      return this;
   }

   /**
    * 输出一个Object对象.
    *
    * @param value        要输出的Object对象
    */
   public JsonPrinter print(Object value)
         throws IOException
   {
      try
      {
         printer.print(this.out, value);
      }
      catch (ConfigurationException ex)
      {
         throw new RuntimeException(ex);
      }
      return this;
   }

   /**
    * 输出一个Object对象数组.
    *
    * @param values       要输出的Object对象数组
    */
   public JsonPrinter print(Object[] values)
         throws IOException
   {
      try
      {
         printer.print(this.out, values);
      }
      catch (ConfigurationException ex)
      {
         throw new RuntimeException(ex);
      }
      return this;
   }

   /**
    * 输出一个换行符.
    */
   public JsonPrinter println()
         throws IOException
   {
      this.out.write(Utility.LINE_SEPARATOR);
      return this;
   }

}
